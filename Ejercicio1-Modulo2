{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled2.ipynb",
      "provenance": [],
      "private_outputs": true,
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyP9w0/kq6oVOcvilO173oAw",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/LoveTechCode/Modulo1/blob/master/Ejercicio1-Modulo2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XBuZa88fLoHQ",
        "colab_type": "text"
      },
      "source": [
        "##Importamos las librerias necesarias"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rVFf5asKE2Zt",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from __future__ import print_function\n",
        " \n",
        "import math\n",
        "\n",
        "from IPython import display # IPython añade funcionalidades extras, resaltado de codigo, autocompletado..\n",
        "from matplotlib import cm  # para mapas de color \n",
        "from matplotlib import gridspec #permite crear graficos en subparcelas independientes\n",
        "from matplotlib import pyplot as plt \n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn import metrics # implementa funciones para evaluar el error de nuestro modelo\n",
        "%tensorflow_version 1.x\n",
        "import tensorflow as tf\n",
        "from tensorflow.python.data import Dataset\n",
        " \n",
        "tf.logging.set_verbosity(tf.logging.ERROR) # configuración de errores por pantalla\n",
        "pd.options.display.max_rows = 10 #maximo de filas cuando imprimimos datos\n",
        "pd.options.display.float_format = '{:.1f}'.format"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KAPdX4EoLijX",
        "colab_type": "text"
      },
      "source": [
        "##Preparamos nuestros datos de entrada"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9ivCDWnwE2Zx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "Tasa = [0.10, 0.15, 0.25,0.50,0.75,0.80,1.0,1.25,1.75]\n",
        "Accidentes = [6,4,8,10,15,25,30,40,45]\n",
        "\n",
        "datos_dataframe = pd.DataFrame()\n",
        "datos_dataframe['Tasa'] = Tasa\n",
        "datos_dataframe['Accidentes'] = Accidentes\n",
        "\n",
        "\n",
        "# Definimos la característica de entrada: total_rooms.\n",
        "mi_caracteristica_input = datos_dataframe[[\"Tasa\"]]\n",
        "\n",
        "# Configuramos la columna de atributos como númerica\n",
        "columna_atributos = [tf.feature_column.numeric_column(\"Tasa\")]\n",
        "\n",
        "# Definimos nuestro objetivo\n",
        "objetivo_median_house_value = datos_dataframe[\"Accidentes\"]\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hnJsOMIBY58e",
        "colab_type": "text"
      },
      "source": [
        "## my_input_fn"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RKZ9zNcHJtwc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def my_input_fn(features, targets, batch_size=1, shuffle=True, num_epochs=100):\n",
        "    \"\"\"Entrenamiento de un modelo Lineal \n",
        "  \n",
        "    Args:\n",
        "      features: Un DataFrame de Pandas\n",
        "      targets: DataFrame de objetivos Pandas.\n",
        "      batch_size: Tamaño del lote que le pasamos al modelo\n",
        "      shuffle: True or False. Sirve para mezclar los datos\n",
        "      num_epochs: Numero de epochs\n",
        "   \n",
        "    \"\"\"\n",
        "  \n",
        "    # Convierte los datos de Pandas en un diccionario de matrices O TENSOR\n",
        "    features = {key:np.array(value) for key,value in dict(features).items()}                                           \n",
        " \n",
        "    # Creamos un nuevo dataset cuyos elementos son trozos del tensor (fetaures, targets). \n",
        "    # El tensor se trocea a lo largo de su primera dimension.\n",
        "    ds = Dataset.from_tensor_slices((features,targets)) # maximo 2GB\n",
        "    ds = ds.batch(batch_size).repeat(num_epochs)\n",
        "    \n",
        " \n",
        "    if shuffle:\n",
        "      ds = ds.shuffle(buffer_size=10000)\n",
        "    \n",
        "    # construye una variable de iteración para el conjunto de datos y devuelve el siguiente lote de datos al regresor lineal\n",
        "    features, labels = ds.make_one_shot_iterator().get_next()\n",
        "    return features, labels"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S1BjoJV2XPu0",
        "colab_type": "text"
      },
      "source": [
        "##Preparamos el modelo"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wgSMeD5UU81N",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def train_model(learning_rate, steps, batch_size, input_feature=\"Tasa\"):\n",
        "  \"\"\"Entrena un modelo de Regresión Lineal de una caracteristica.\n",
        "  \n",
        "  Args:\n",
        "    learning_rate: tasa de aprendizaje\n",
        "    steps: pasos del entrenamiento\n",
        "    batch_size: Tamaño del lote.\n",
        "    input_feature: Un String que especifica una columna`datos\n",
        "_dataframe`\n",
        "      para usar como caracteristica de entrada\n",
        "  \"\"\"\n",
        "  \n",
        "  periods = 10\n",
        "  steps_per_period = steps / periods\n",
        "\n",
        "  my_feature = input_feature\n",
        "  my_feature_data = datos_dataframe[[my_feature]]\n",
        "  my_label = \"Accidentes\"\n",
        "  targets = datos_dataframe[my_label]\n",
        "\n",
        "  # Damos formato numerico a los valores de la columna\n",
        "  feature_columns = [tf.feature_column.numeric_column(my_feature)]\n",
        "  \n",
        "  # Definimos las funciones input_fn para el modelo\n",
        "  training_input_fn = lambda:my_input_fn(my_feature_data, targets, batch_size=batch_size)\n",
        "  prediction_input_fn = lambda:my_input_fn(my_feature_data, targets, num_epochs=1, shuffle=False)\n",
        "  \n",
        "  # Construimos el optimizador y el estimador\n",
        "  my_optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)\n",
        "  my_optimizer = tf.contrib.estimator.clip_gradients_by_norm(my_optimizer, 5.0)\n",
        "  linear_regressor = tf.estimator.LinearRegressor(\n",
        "      feature_columns=feature_columns,\n",
        "      optimizer=my_optimizer\n",
        "  )\n",
        "\n",
        "  ### # Preparamos la representacion grafica de los resultados\n",
        "  ### # Representacion de la grafica izquierda del frame\n",
        "  ### plt.figure(figsize=(15, 6))\n",
        "  ### plt.subplot(1, 2, 1)\n",
        "  ### plt.title(\"Learned Line by Period\")\n",
        "  ### plt.ylabel(my_label)\n",
        "  ### plt.xlabel(my_feature)\n",
        "  ### sample = datos_dataframe.sample(n=300)\n",
        "  ### plt.scatter(sample[my_feature], sample[my_label])\n",
        "  ### colors = [cm.coolwarm(x) for x in np.linspace(-1, 1, periods)]\n",
        "\n",
        "  # Entrenamos el modelo dentro de un bucle para evaluar perdidas periodicamente\n",
        "\n",
        "  print(\"Entrenando el modelo...\")\n",
        "  print(\"RMSE (en datos de entrenamiento):\")\n",
        "  root_mean_squared_errors = []\n",
        "  for period in range (0, periods):\n",
        "    # \n",
        "    linear_regressor.train(\n",
        "        input_fn=training_input_fn,\n",
        "        steps=steps_per_period\n",
        "    )\n",
        "    # Toma un descanso y computa predicciones\n",
        "    predictions = linear_regressor.predict(input_fn=prediction_input_fn)\n",
        "    predictions = np.array([item['predictions'][0] for item in predictions])\n",
        "    \n",
        "    # Computa perdidas.\n",
        "    root_mean_squared_error = math.sqrt(\n",
        "        metrics.mean_squared_error(predictions, targets))\n",
        "    \n",
        "    # Ocasionalmente imprime la perdida actual\n",
        "    print(\"  periodo %02d : %0.2f\" % (period, root_mean_squared_error))\n",
        "    \n",
        "    # Agrega las metricas de perdida de este periodo a nuestra lista\n",
        "    root_mean_squared_errors.append(root_mean_squared_error)\n",
        "    \n",
        "    ### # Finalmente, realiza un seguimiento de los pesos y los sesgos a lo largo del tiempo. \n",
        "    ### y_extents = np.array([0, sample[my_label].max()])\n",
        "    ### \n",
        "    ### weight = linear_regressor.get_variable_value('linear/linear_model/%s/weights' % input_feature)[0]\n",
        "    ### bias = linear_regressor.get_variable_value('linear/linear_model/bias_weights')\n",
        "\n",
        "    ### x_extents = (y_extents - bias) / weight\n",
        "    ### x_extents = np.maximum(np.minimum(x_extents,\n",
        "    ###                                   sample[my_feature].max()),\n",
        "    ###                        sample[my_feature].min())\n",
        "    ### y_extents = weight * x_extents + bias\n",
        "    ### plt.plot(x_extents, y_extents, color=colors[period])\n",
        "\n",
        "  print(\"Entrenamiento del modelo Finalizado.\")\n",
        "\n",
        "  ### # Genera el grafico de metricas\n",
        "  ### # Representacion de la grafica derecha del frame\n",
        "  ### plt.subplot(1, 2, 2)\n",
        "  ### plt.ylabel('RMSE')\n",
        "  ### plt.xlabel('Periodos')\n",
        "  ### plt.title(\"Root Mean Squared Error vs. Periods\")\n",
        "  ### plt.tight_layout()\n",
        "  ### plt.plot(root_mean_squared_errors)\n",
        "\n",
        "  # Pinta la tabla con los datos de calibración.\n",
        "  calibration_data = pd.DataFrame()\n",
        "  calibration_data[\"predictions\"] = pd.Series(predictions)\n",
        "  calibration_data[\"targets\"] = pd.Series(targets)\n",
        "  display.display(calibration_data.describe())\n",
        "\n",
        "  print(\"Final RMSE (on training data): %0.2f\" % root_mean_squared_error)\n",
        "  "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EfAF2trSXJQZ",
        "colab_type": "text"
      },
      "source": [
        "##Entrenamos\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UzoZUSdLIolF",
        "colab_type": "code",
        "cellView": "both",
        "colab": {}
      },
      "source": [
        "train_model(\n",
        "    learning_rate=0.00001,\n",
        "    steps=100,\n",
        "    batch_size=1\n",
        ")"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}